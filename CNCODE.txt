1) H

#include<iostream>
 
using namespace std;
 
int main() {
    int data[10];
    int dataatrec[10],c,c1,c2,c3,i;
 
    cout<<"Enter 4 bits of data one by one\n";
    cin>>data[0];
    cin>>data[1];
    cin>>data[2];
    cin>>data[4];
 
    //Calculation of even parity
    data[6]=data[0]^data[2]^data[4];
data[5]=data[0]^data[1]^data[4];
data[3]=data[0]^data[1]^data[2];
 
cout<<"\nEncoded data is\n";
for(i=0;i<7;i++)
        cout<<data[i];
   
cout<<"\n\nEnter received data bits one by one\n";
    for(i=0;i<7;i++)
        cin>>dataatrec[i];
 
    c1=dataatrec[6]^dataatrec[4]^dataatrec[2]^dataatrec[0];
c2=dataatrec[5]^dataatrec[4]^dataatrec[1]^dataatrec[0];
c3=dataatrec[3]^dataatrec[2]^dataatrec[1]^dataatrec[0];
c=c3*4+c2*2+c1 ;
 
    if(c==0) {
cout<<"\nNo error while transmission of data\n";
    }
else {
cout<<"\nError on position "<<c;

cout<<"\nData sent : ";
for(i=0;i<7;i++)
        cout<<data[i];
       
cout<<"\nData received : ";
        for(i=0;i<7;i++)
        cout<<dataatrec[i];
       
cout<<"\nCorrect message is\n";
       
//if errorneous bit is 0 we complement it else vice versa
if(dataatrec[7-c]==0)
dataatrec[7-c]=1;
        else
dataatrec[7-c]=0;
for (i=0;i<7;i++) {
cout<<dataatrec[i];
}
}

return 0;
}

2) LB

#include <iostream>
using namespace std;

int main(int argc, const char * argv[]) {
    cout << "Enter size of buffer: ";
    int bufferSize;
    cin >> bufferSize;
    cout << "Enter output rate: ";
    int outputRate;
    cin >> outputRate;
    int choice;
    int dataSize;
    int bufferFilled = 0;
    while (true) {
        cout << "Is there any new data to send?" << endl << "Enter 1 for yes, 0 for no: ";
        cin >> choice;
        if (choice == 1) {
            cout << "Enter size of data: ";
            cin >> dataSize;
            if (dataSize > bufferSize - bufferFilled) {
                cout << "Packet dropped, insufficient space available in buffer";
            }
            else {
                cout << "Packet added to buffer" <<endl;
                bufferFilled += dataSize;
            }
        }
        if (bufferFilled != 0) {
            if (bufferFilled > outputRate) {
                cout << outputRate << " bytes sent" << endl;
                bufferFilled -= outputRate;
           }
            else {
                cout << bufferFilled << " bytes sent" << endl;
                bufferFilled = 0;
            }
        }
        else {
            cout << "No data to send, buffer empty" << endl;
        }
    }
    return 0;
}

3) cr

#include<iostream>
#include<string.h>

using namespace std;

int crc(char* ip, char* op, char* poly, int mode)
{
    strcpy(op, ip);
    if (mode) {
        for (int i = 1; i < strlen(poly); i++)
            strcat(op, "0");
    }
    //perform xor with the selected polynomial
   
    for (int i = 1; i < strlen(ip); i++) {
        if (op[i] == '1') {
            for (int j = 1; 1 < strlen(poly); j++) {
                if (op[i + j] == poly[j])
                    op[i + j] = '0';
                else
                    op[i + j] = '1';
               
            }
        }
    }
    // check for errors, return 0 if error detected
    for (int i = 1; i < strlen(poly); i++)
        if (op[i] == '1')
            return 0;
    return 1;
}


int main()
{
    char ip[50], op[50], recv[50];
    char poly[] = "10001000000100001";

    cout << "Enter the input message in binary"<< endl;
    cin >> ip;
    crc(ip, op, poly, 1);
    cout << "The transmitted message is: " << ip << op + strlen(ip) << endl;
    cout << "Enter the recevied message in binary" << endl;
    cin >> recv;
    if (crc(recv, op, poly, 0))
        cout << "No error in data" << endl;
    else
        cout << "Error in data transmission has occurred" << endl;

    return 0;
}

